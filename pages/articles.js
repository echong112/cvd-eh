import Head from 'next/head';
import { useEffect, useRef, useState } from 'react';
import { getArticles, getSingleArticleById } from '../src/actions/fl';
import Article from '../src/components/Article/Articles';

import Loading from '../src/components/Layout/Loading';
import { useRouter } from 'next/router';
import VideoPage from '../src/components/Page/VideoPage';

export default function Articles() {
  const router = useRouter();
  const [videos, setVideos] = useState([]);
  const [featured, setFeatured] = useState([]);
  const [fetchedFeatured, setFetchedFeatured] = useState(false);
  const [singleVideo, setSingleVideo] = useState(null);
  const [startAfter, setStartAfter] = useState(null);
  const [scrollPosition, setScrollPosition] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [detail, setDetail] = useState('');
  let videoContainerRef = useRef(null);

  const fetchArticles = async () => {
    setIsLoading(true);

    let featuredRes = [];
    if (!fetchedFeatured) {
      // featuredRes = await getFeaturedCollection();
      // setFeatured(featuredRes);
    } else {
      featuredRes = featured;
    }

    const response = await getArticles(startAfter);
    if (response) {
      const entries = Object.values(response);
      const last = entries[entries.length - 1];

      const filtered = entries.filter((entry) => {
        const contains = featuredRes.some((video) => {
          return entry.id === video.id;
        });
        return !contains;
      });

      const allVideos = [...videos, ...filtered];
      setVideos(allVideos);
      setStartAfter(last.publishDate);
    }

    setFetchedFeatured(true);
    setIsLoading(false);
  };

  const handleScroll = async () => {
    const position = window.pageYOffset;
    setScrollPosition(position);
  };

  useEffect(() => {
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  useEffect(() => {
    async function getData() {
      // TODO: Make this more generic
      if (router.query.detail) {
        setDetail(router.query.detail);
        if (!singleVideo) {
          const singleVideoRes = await getSingleArticleById(router.query.detail);
          setSingleVideo(singleVideoRes);
        }
      } else {
        setDetail('');
        setSingleVideo(null);
        await fetchArticles();
      }
    }
    getData();
  }, [router]);

  useEffect(() => {
    async function getData() {
      if (videoContainerRef) {
        const videoContainer = videoContainerRef.getBoundingClientRect();
        if (scrollPosition + window.innerHeight > videoContainer.bottom && !router.query.detail) {
          await fetchArticles();
        }
      }
    }
    getData();
  }, [scrollPosition]);

  return (
    <div>
      <Head>
        <title>Courageous Video Directory</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div ref={(ref) => (videoContainerRef = ref)}>
        {videos && detail === '' && <Article title={'Latest Articles'} videos={videos} />}

        {singleVideo && <VideoPage videoId={detail} allVideos={videos} article={singleVideo} />}
      </div>
      {isLoading && <Loading />}
    </div>
  );
}
