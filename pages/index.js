import { useEffect, useRef, useState } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import {
  getVideos,
  getSingleVideoById,
  getFeaturedCollection,
  getArticles,
  getSingleArticleById
} from '../src/actions/fl';
import Videos from '../src/components/Videos/Videos';
import Loading from '../src/components/Layout/Loading';
import VideoPage from '../src/components/Page/VideoPage';
import Slideshow from '../src/components/Slideshow/Slideshow';

export default function Home() {
  const router = useRouter();
  const [videos, setVideos] = useState([]);
  const [articles, setArticles] = useState([]);
  const [featured, setFeatured] = useState([]);
  const [fetchedFeatured, setFetchedFeatured] = useState(false);
  const [singleVideo, setSingleVideo] = useState(null);
  const [startAfter, setStartAfter] = useState(undefined);
  const [startAfterArticles, setStartAfterArticles] = useState(undefined);

  const [scrollPosition, setScrollPosition] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [detail, setDetail] = useState('');
  let videoContainerRef = useRef(null);

  const fetchedFeaturedCollection = async () => {
    let featuredRes = [];
    if (!fetchedFeatured) {
      featuredRes = await getFeaturedCollection();
      setFeatured(featuredRes);
    } else {
      featuredRes = featured;
    }
  };

  const getAndMergeData = async () => {
    const videosRes = await fetchVideos();
    const articlesRes = await fetchArticles();
    const merged = [...videosRes, ...articlesRes];
    setVideos(merged);
    return merged;
  };

  const fetchVideos = async () => {
    setIsLoading(true);
    const response = await getVideos(startAfter);

    if (response) {
      const entries = Object.values(response);
      const last = entries[entries.length - 1];
      const filtered = entries.filter((entry) => {
        const contains = featured.some((video) => {
          return entry.id === video.id;
        });
        return !contains;
      });

      if (startAfter !== '') {
        const allVideos = [...videos, ...filtered];
        // setVideos(allVideos);
        setStartAfter(last.publishDate);
        return allVideos;
      }
    }

    setFetchedFeatured(true);
    setIsLoading(false);
  };

  const fetchArticles = async () => {
    setIsLoading(true);
    const response = await getArticles(startAfterArticles);

    if (response) {
      const entries = Object.values(response);
      const last = entries[entries.length - 1];
      const filtered = entries.filter((entry) => {
        const contains = featured.some((video) => {
          return entry.id === video.id;
        });
        return !contains;
      });

      if (startAfter !== '') {
        const allVideos = [...articles, ...filtered];

        setStartAfterArticles(last.publishDate);
        // setArticles(allVideos);
        return allVideos;
      }
    }

    setFetchedFeatured(true);
    setIsLoading(false);
  };
  const handleScroll = async () => {
    const position = window.pageYOffset;
    setScrollPosition(position);
  };

  useEffect(() => {
    async function getData() {
      if (!router.query.detail) {
        await fetchedFeaturedCollection();

        await getAndMergeData();
      }
    }
    getData();
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  useEffect(() => {
    async function getData() {
      if (router.query.detail) {
        setDetail(router.query.detail);
        if (!singleVideo) {
          let singleVideoRes = await getSingleVideoById(router.query.detail);
          if (!singleVideoRes) {
            singleVideoRes = await getSingleArticleById(router.query.detail);
          }
          setSingleVideo(singleVideoRes);
        }
      } else {
        setDetail('');
      }
    }
    getData();
  }, [router]);

  useEffect(() => {
    async function getData() {
      if (videoContainerRef) {
        const videoContainer = videoContainerRef.getBoundingClientRect();
        if (
          scrollPosition + window.innerHeight > videoContainer.bottom &&
          !router.query.detail &&
          startAfter !== ''
        ) {
          setTimeout(async () => {
            await getAndMergeData();
          }, 250);
        }
      }
    }
    getData();
  }, [scrollPosition]);

  return (
    <div>
      <Head>
        <title>Courageous Video Directory</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div ref={(ref) => (videoContainerRef = ref)}>
        <div>{featured && detail === '' && <Slideshow title={'Featured'} videos={featured} />}</div>
        {videos && detail === '' && <Videos title={'Latest'} videos={videos} />}
        {singleVideo && <VideoPage videoId={detail} allVideos={videos} />}
      </div>
      {isLoading && !singleVideo && <Loading />}
    </div>
  );
}
